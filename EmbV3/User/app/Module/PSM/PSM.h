#ifndef __P__S__M__H__
#define __P__S__M__H__


#include "stm32f4xx.h"
#include "EmbSysProc.h"


#define PSM_SlaveAddr  0x01

#define PSM_HEADER_FLAG		0xDDDD


#define PSM_PACKET_HEADER   1



/*****************************************************************************************************************************************************************************
																		PSM 电源开关板的寄存器定义
******************************************************************************************************************************************************************************/

									//寄存器地址	寄存器地址（HEX）	名称	描述	读写	取值范围	初始值	备注
									//0	0	设备型号主分类	设备型号，主分类	R	0-255	3(0X03)	主要公司内部各种硬件分类区别，电源开关板主类型号为3
									//1	1	设备型号次分类	设备型号，次分类	R	0-255	2(0X02)	主要是同一大类下各版本区分，V0.2版为2
									//2	2	固件版本主版本号	固件版本（主版本号）	R	0-255	1(0X01)	固件主板本尽量与硬件版本对应
									//3	3	固件版本副板本号	固件版本（副板本号）	R	0-255	0(0x00)	同主板本下不同软件版本
									//4	4	地址号	从站ID	RW	1-253	1(0x01)	
									//5	5	波特率	通信波特率	RW	见下方波特率表	10（1152000）	默认校验方式8N1
									//6	6	应答延迟时间	接收到有效信息后反馈的延迟时间	RW	0-255	250(0XFA)	延迟时间等于取值的2倍微秒，比如取值10，则代表延迟20us
																
									//27	1B	输入最高电压值L	电源开关板输入最高电压低字节	RW	0-9999	3000	数值放大了100倍
									//28	1C	输入最高电压值H	电源开关板输入最高电压高字节	RW			
									//27	1B	输入最低电压值L	电源开关板输入最低电压低字节	RW	0-9999		数值放大了100倍
									//28	1C	输入最低电压值H	电源开关板输入最低电压高字节	RW			
									//29	1D	上位机供电电压最低值L	给上位机供电最低电压低字节	RW	0-9999		数值放大了100倍
									//30	1E	上位机供电电压最低值H	给上位机供电最低电压高字节	RW			
									//31	1F	左臂供电电压最低值L	给左臂供电最低电压低字节	RW	0-9999		数值放大了100倍
									//32	20	左臂供电电压最低值H	给左臂供电最低电压高字节	RW			
									//33	21	右臂供电电压最低值L	给右臂供电最低电压低字节	RW	0-9999		数值放大了100倍
									//34	22	右臂供电电压最低值H	给右臂供电最低电压高字节	RW			
									//35	23	底盘供电电压最低值L	给底盘供电最低电压低字节	RW	0-9999		数值放大了100倍
									//36	24	底盘供电电压最低值H	给底盘供电最低电压高字节	RW			
									//35	23	其他供电电压最低值L	给其他部分供电最低电压低字节	RW	0-9999		数值放大了100倍
									//36	24	其他供电电压最低值H	给其他部分供电最低电压高字节	RW			
									//35	23	DC5V供电电压最低值L	给底盘供电最低电压低字节	RW	0-9999		数值放大了100倍
									//36	24	DC5V供电电压最低值H	给底盘供电最低电压高字节	RW			
									//35	23	DC12V供电电压最低值L	给底盘供电最低电压低字节	RW	0-9999		数值放大了100倍
									//36	24	DC12V供电电压最低值H	给底盘供电最低电压高字节	RW			
									//37	25	上位机供电最大电流L	上位机供电最大电流低字节	RW	0-9999		数值放大了100倍
									//38	26	上位机供电最大电流H	上位机供电最大电流高字节	RW			
									//39	27	左臂供电最大电流L	左臂供电最大电流低字节	RW	0-9999		数值放大了100倍
									//40	28	左臂供电最大电流H	左臂供电最大电流高字节	RW			
									//41	29	右臂供电最大电流L	右臂供电最大电流低字节	RW	0-9999		数值放大了100倍
									//42	2A	右臂供电最大电流H	右臂供电最大电流高字节	RW			
									//43	2B	底盘供电最大电流L	底盘供电最大电流低字节	RW	0-9999		数值放大了100倍
									//44	2C	底盘供电最大电流H	底盘供电最大电流高字节	RW			
									//43	2B	其他供电最大电流L	其他模块供电最大电流低字节	RW	0-9999		数值放大了100倍
									//44	2C	其他供电最大电流H	其他模块供电最大电流高字节	RW			
							
							
#define PSM_PowerOffCmd         0x32        //50	32	关机命令		RW	0-1	0	1代表上位机已收到关机命令，可以开始执行关机操作
#define PSM_PowerOffDelay      0x33        //51	33	关机延迟时间		RW	0-255		单位s，代表收到此指令后，延时时间到达后可以关机
#define PSM_CtrlSwitchOnOff     0x34        //52	34	控制开关通断		RW	0-255		1代表断电，0代表上电；Bit0代表左臂；Bit1代表底盘；Bit2代表右臂；Bit3代表其他；Bit4代表DCDC；bit6代表休眠
#define PSM_LEDCtrl               0x35        //53	35	LED状态		RW	0-255		0代表蓝色全亮，1代表全灭，2代表红色报警2HZ闪烁，3代表蓝色1HZ闪烁，4代表绿色0.5HZ闪烁渐变，5代表黄色2HZ闪烁
#define PSM_TriggerPowerOff    0x36        //54	36	外部触发关机状态		R	0-1	0	0代表外界未触发操作，1代表外界触发关机操作，2代表外界触发休眠，3代表外界唤醒休眠
									//55	37	机器人当前开关机状态		R	0-255	0	0代表未开机状态，1代表已开机正在启动，2代表已开机，3代表休眠状态，4代表急停状态，5等待关机状态
									//56	38	各路开关当前闭合状态		R	0-255	0	bit0代表上位机供电回路,1代表闭合，0代表打开状态；Bit1代表左臂；Bit2代表底盘；Bit3代表右臂；Bit4代表其他；Bit5代表DCDC；Bit6代表上位机已开机
									//57	39	电源开关板当前状态1		R	0-255	0	bit1-bit0代表上位机供电回路00代表正常，01代表欠压，10代表过流；bit3-2代表左臂；bit5-4底盘；bit7-6右臂；
									//58	3A	电源开关板当前状态2		R	0-255	0	bit1-0代表其他模块；bit3-2代表DCDC5V回路；bit5-4代表DCDC12V回路；
									//59	3B	输入电压L	供电输入电压低字节	R	0-6000	0	数值放大了100倍，单位0.01V
									//60	3C	输入电压H	供电输入电压高字节				
									//61	3D	上位机供电电压L	给上位机供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//62	3E	上位机供电电压H	给上位机供电电压高字节				
									//63	3F	左臂供电电压L	给左臂供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//64	40	左臂供电电压H	给左臂供电电压高字节				
									//65	41	右臂供电电压L	给右臂供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//66	42	右臂供电电压H	给右臂供电电压高字节				
									//67	43	底盘供电电压L	给底盘供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//68	44	底盘供电电压H	给底盘供电电压高字节				
									//69	45	其他供电电压L	给其他部分供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//70	46	其他供电电压H	给其他部分供电电压高字节				
									//71	47	DC5V供电电压L	给底盘供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//72	48	DC5V供电电压H	给底盘供电电压高字节				
									//73	49	DC12V供电电压L	给底盘供电电压低字节	R	0-6000		数值放大了100倍，单位0.01V
									//74	4A	DC12V供电电压H	给底盘供电电压高字节				
									//75	4B	上位机供电电流L	上位机供电电流低字节	R	0-9999		数值放大了100倍，单位0.01A
									//76	4C	上位机供电电流H	上位机供电电流高字节				
									//77	4D	左臂供电电流L	左臂供电电流低字节	R	0-9999		数值放大了100倍，单位0.01A
									//78	4E	左臂供电电流H	左臂供电电流高字节				
									//79	4F	右臂供电电流L	右臂供电电流低字节	R	0-9999		数值放大了100倍，单位0.01A
									//80	50	右臂供电电流H	右臂供电电流高字节				
									//81	51	底盘供电电流L	底盘供电电流低字节	R	0-9999		数值放大了100倍，单位0.01A
									//82	52	底盘供电电流H	底盘供电电流高字节				
									//83	53	其他供电电流L	其他模块供电电流低字节	R	0-9999		数值放大了100倍，单位0.01A
									//84	54	其他供电电流H	其他模块供电电流高字节				
									//85	55	DC供电电流L	其他模块供电电流低字节	R	0-9999		数值放大了100倍，单位0.01A
									//86	56	DC供电电流H	其他模块供电电流高字节				


//chengyi 2018.1.24  寄存器的定义和上下位机协议有点都不上，后续核实。
typedef enum{
	LED_BLUE_ON=0,//0代表蓝色全亮，
	LED_OFF=1,//1代表全灭，
	LED_READ_2HZ=2,//2代表红色报警2HZ闪烁，
	LED_BLUE_1HZ=3,//3代表蓝色1HZ闪烁，
	LED_GREEN_0_5HZ=4,//4代表绿色0.5HZ闪烁渐变，
	LED_YELLOW_2HZ=5//5代表黄色2HZ闪烁
} LedCtrlType;




///电源开关板输出数量
#define PSM_OUT_NUM                                   7
///电压，电流结构体
typedef struct
{ 	
 u16 unVoltage;//数值放大了100倍，单位0.01V
 u16 unCurrent;//数值放大了100倍，单位0.01A
}ModulePSM;

///电源开关板结构体
typedef struct
{ 	
    u32  unTimestamp;
    ModulePSM sPSM_Out[PSM_OUT_NUM];   //reg:0x3D-0x4A电源开关板七路电压电流状态:	0 sPC;	1 sLeftArm_PSM; 2 sRightArm_PSM; 3 sWheel_PSM;	4 sElse_PSM; 5 sDC5V_PSM; 6 sDC12V_PSM;
    u8   unPSM_Status1;                //reg:0x39 电源开关板当前状态1:  bit1-0代表上位机供电回路 00代表正常，01代表欠压，10代表过流；bit3-2代表左臂； bit5-4底盘； bit7-6右臂；
	u8   unPSM_Status2;                //reg:0x3A 电源开关板当前状态2:  bit1-0代表其他模块；  00代表正常，01代表欠压，10代表过流；bit3-2代表DCDC5V回路；bit5-4代表DCDC12V回路；
	u8   unPSM_PowerSwitchStatus;      //reg:0x38 各路开关状态: bit0代表上位机供电回路,1代表闭合，0代表打开状态；	 Bit1代表左臂；  Bit2代表底盘；  Bit3代表右臂；  Bit4代表其他；  Bit5代表DCDC；  Bit6代表上位机已开机，1：已开机
    u8   unRobotCurrentStatus;         //reg:0x37 机器人当前开机状态：	0代表未开机状态，	1代表已开机正在启动，	2代表已开机，	3代表休眠状态， 	4代表急停状态， 	5等待关机状态
    u8   unRobotSwitchStatus;          //reg:0x36 外部触发关机状态:	 0代表外界未触发操作，	 1代表外界触发关机操作， 2代表外界触发休眠， 3代表外界唤醒休眠 
    u8   unRobotLedStatus;
    u8   unRobotStopDelay;             //关机延迟：单位s，延时时间到达后可以关机
    u8   unPSM_PowerSwitch;            //各回路通断电开关：1代表断电，0代表上电；Bit0代表左臂；	Bit1代表底盘；	Bit2代表右臂；	Bit3代表其他；	Bit4代表DCDC； 
    u8   unPSMSlaveryStatus;           // status 从站状态
}PSM;//电源开关板状态



typedef struct{
	PSM sPSM;
	PSMPSUReRecord reRecord;    //!< 发送数据包的记录与收到回复的记录
	u8 mCommStatus;          //!< 与PSM通信状态记录，发查询给PSM之前先清除，待下一周期查询是否有回复
}EwayPSMModule;


#include "PSM_Cmd.h"
#include "PSM_Status.h"


#endif


